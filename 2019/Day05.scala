object Day05 extends App {
  val programs = Array(
    ("0", "1002,4,3,4,33"),
    ("0", "3,9,8,9,10,9,4,9,99,-1,8"), // - Using position mode, consider whether the input is equal to 8; output 1 (if it is) or 0 (if it is not).
    ("0", "3,9,7,9,10,9,4,9,99,-1,8"), // - Using position mode, consider whether the input is less than 8; output 1 (if it is) or 0 (if it is not).
    ("0", "3,3,1108,-1,8,3,4,3,99"), // - Using immediate mode, consider whether the input is equal to 8; output 1 (if it is) or 0 (if it is not).
    ("0", "3,3,1107,-1,8,3,4,3,99"), // - Using immediate mode, consider whether the input is less than 8; output 1 (if it is) or 0 (if it is not).
    ("0", "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9"), // (using position mode)
    ("0", "3,3,1105,-1,9,1101,0,0,12,4,12,99,1"), // (using immediate mode)
    ("0", "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99"), //
    ("5", "3,225,1,225,6,6,1100,1,238,225,104,0,1101,40,71,224,1001,224,-111,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1102,66,6,225,1102,22,54,225,1,65,35,224,1001,224,-86,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1102,20,80,225,101,92,148,224,101,-162,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1102,63,60,225,1101,32,48,225,2,173,95,224,1001,224,-448,224,4,224,102,8,223,223,1001,224,4,224,1,224,223,223,1001,91,16,224,101,-79,224,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1101,13,29,225,1101,71,70,225,1002,39,56,224,1001,224,-1232,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,14,59,225,102,38,143,224,1001,224,-494,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,30,28,224,1001,224,-840,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,677,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,344,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,359,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,374,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,389,101,1,223,223,1008,226,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,108,677,226,224,1002,223,2,223,1006,224,419,1001,223,1,223,1108,677,226,224,102,2,223,223,1006,224,434,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,449,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,494,101,1,223,223,1007,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,524,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,539,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,554,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,569,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,584,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,599,101,1,223,223,1008,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,644,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,659,1001,223,1,223,1107,226,226,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226"),
  )

  sealed trait Mode {
    override def toString: String = this.getClass.getName.dropRight(1).takeRight(1)
  }

  object Mode {
    object P extends Mode
    object I extends Mode
    def apply(i: Int): Mode = i match {
      case 0 => P
      case 1 => I
    }
    def apply(i: Char): Mode = apply(i.asDigit)
    def apply(i: String): Mode = apply(i.toInt)
  }

  object Op {
    def unapply(op: Int): Option[(Mode, Mode, Mode, Int)] = {
      val raw = "%05d".format(op)
      Option((
        Mode(raw(2)),
        Mode(raw(1)),
        Mode(raw(0)),
        raw.takeRight(2).toInt
      ))
    }
  }

  implicit class RAM(val self: Array[Int]) extends AnyVal {
    def apply(mode: Mode)(p: Int): Int = mode match {
      case Mode.P => self(self(p))
      case Mode.I => self(p)
    }
  }

  implicit class Program(val self: String) extends AnyVal {
    def run(inputStr: String): Array[Int] = {
      val input = inputStr.split(",").map(_.toInt)
      var inputP = 0
      val ram = self.split(",").map(_.toInt)
      var ip = 0
      import Mode._
      while (ram(ip) != 99) {
        ram(ip) match {
          case Op(m0, m1, P, 1) =>
            val a0 = ram(m0)(ip + 1)
            val a1 = ram(m1)(ip + 2)
            ram(ram(ip + 3)) = a0 + a1
            ip += 4
          case Op(m0, m1, P, 2) =>
            val a0 = ram(m0)(ip + 1)
            val a1 = ram(m1)(ip + 2)
            ram(ram(ip + 3)) = a0 * a1
            ip += 4
          case Op(P, P, P, 3) =>
            ram(ram(ip + 1)) = input(inputP)
            inputP += 1
            ip += 2
          case Op(m0, P, P, 4) =>
            println(ram(m0)(ip + 1))
            ip += 2
          case Op(m0, m1, P, 5) =>
            val a0 = ram(m0)(ip + 1)
            val a1 = ram(m1)(ip + 2)
            if (a0 != 0) ip = a1 else ip += 3
          case Op(m0, m1, P, 6) =>
            val a0 = ram(m0)(ip + 1)
            val a1 = ram(m1)(ip + 2)
            if (a0 == 0) ip = a1 else ip += 3
          case Op(m0, m1, P, 7) =>
            val a0 = ram(m0)(ip + 1)
            val a1 = ram(m1)(ip + 2)
            ram(ram(ip + 3)) = if (a0 < a1) 1 else 0
            ip += 4
          case Op(m0, m1, P, 8) =>
            val a0 = ram(m0)(ip + 1)
            val a1 = ram(m1)(ip + 2)
            ram(ram(ip + 3)) = if (a0 == a1) 1 else 0
            ip += 4
        }
      }
      ram
    }
  }

  for {
    (i, p) <- programs
    res = p.run(i)
  } {
    println("0: " + res(0))
  }
}